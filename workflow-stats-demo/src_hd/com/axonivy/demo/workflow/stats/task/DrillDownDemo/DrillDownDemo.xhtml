<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component" xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions">
<h:body>
  <ui:composition template="/layouts/basic-10.xhtml">
    <ui:define name="title">Drill Down ChartJS and REST Workflow Task Statistic API Demo</ui:define>
    <ui:define name="content">

      <!-- Loads the ChartJs library needed to render the chart -->
      <h:outputScript library="primefaces" name="chartjs/chartjs.js" />

      <h:form id="form">
        <p:messages />

        <h1>Drill Down ChartJS and REST Workflow Task Statistic API Demo</h1>
        
        <h2>All tasks by start timestamp with drill down</h2>
        <div>
          <!-- Placeholder to render the Chart chart1 into it -->
          <canvas id="chart1" style="height: 200px;"></canvas>
        </div>
        
        <script>
const chart1 = document.getElementById('chart1');
const userActionChart1 = async () => {
  var basePath = window.location.pathname;
  basePath = basePath.substring(0, basePath.indexOf('/faces/')); 
  
  // Calls the Workflow Task Statistic REST API to aggregate startTimestamp
  const response = await fetch(basePath+'/api/workflow/tasks/stats?agg=startTimestamp:bucket:year');  
  const result = await response.json();  

  var interval = 'year'
  var dates = result.map(bucket => toLocalDate(bucket.key))
  const chart = new Chart(chart1, {
    type: 'bar',
    data: {
      labels: result.map(bucket => toLabel('year', bucket.key)),
      datasets: [{
        label: 'Tasks by Start timestamp',
        borderWidth: 1,
        data: result.map(bucket => bucket.count)
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          title: {
            text: 'Tasks',
            display: true
          }
        },
        x: {
          title: {
            text: 'Start Timestamp per ' + interval,
            display: true
          }
        }
      }
    }
  });
  chart1.onclick = function(evt) {
    const points = chart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);
    if (points[0]) {
       const firstPoint = points[0];
       const label = chart.data.labels[firstPoint.index];
       const date = dates[firstPoint.index];
       const action = async () => {
         const filter = toFilter(interval, date);
         interval = toNextInterval(interval);
         if (interval != undefined) {
           const response = await fetch(basePath+'/api/workflow/tasks/stats?agg=startTimestamp:bucket:' + interval + '&amp;filter=' + filter);  
           const result = await response.json();  
           dates = result.map(bucket => toLocalDate(bucket.key));
           chart.data.labels = result.map(bucket => toLabel(interval, bucket.key));
           chart.data.datasets[0].data = result.map(bucket => bucket.count);
           chart.options.scales.x.title.text = '"Start Timestamp per ' + interval;
           chart.update();
         }
       }
       action();
    }
  }
}

function toFilter(interval, fromDate) {
  toDate = structuredClone(fromDate);
  switch(interval) {
    case 'year':
      toDate.setFullYear(toDate.getFullYear()+1);
      break;
    case 'month':
      toDate.setMonth(toDate.getMonth()+1);
      break;
    case 'week':
      toDate.setDate(toDate.getDate()+7);
      break;
    case 'day':
      toDate.setDate(toDate.getDate()+1);
      break;
    case 'hour':
      toDate.setHours(toDate.getHours()+1);
      break;
/*     case 'minute':
      toDate.setMinutes(toDate.getMinutes()+1);
      break;
    case 'second':
      toDate.setSeconds(toDate.getSeconds()+1);
      break;*/
  }

  const fromFilter = fromDate.toISOString().substr(0, 19) + 'Z';
  const toFilter = toDate.toISOString().substr(0, 19) + 'Z';
  return 'startTimestamp:&gt;' +fromFilter + ' &lt;' + toFilter;
}

function toNextInterval(interval) {
  switch(interval) {
    case 'year':
      return 'month';
    case 'month':
      return 'week';
    case 'week':
      return 'day';
    case 'day':
      return 'hour';
/*     case 'hour':
      return 'minute';
    case 'minute':
      return 'second';*/
    default: 
      return undefined;
  }
}

function toLabel(interval, utc) {
  const date = toLocalDate(utc);
  switch(interval) {
    case 'year':
      return date.getFullYear();
    case 'month':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short'});
    case 'week':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short', day: 'numeric'});
    case 'day':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short', day: 'numeric'});
    case 'hour':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short', day: 'numeric', hour: 'numeric'});
/*     case 'minute':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short', day: 'numeric', hour: 'numberic',  minute: 'numeric'});
    case 'second':
      return date.toLocaleString(undefined, {year : 'numeric', month: 'short', day: 'numeric', hour: 'numberic',  minute: 'numeric', second: 'numberic'}); */  
    default:
      return utc;
  }
}

function toLocalDate(utc) {
  return new Date(utc);
}
 
userActionChart1();
          </script>
        <div class="command-btns">
          <p:commandLink id="cancel"
            actionListener="#{ivyWorkflowView.cancel()}" value="Cancel" />
          <p:commandButton id="proceed" actionListener="#{logic.close}"
            value="Proceed" update="form" icon="pi pi-check" />
        </div>
      </h:form>

    </ui:define>
  </ui:composition>
</h:body>

</html>