<html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html"
  xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component"
  xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions">
<h:body>
  <ui:composition template="/layouts/frame-10.xhtml">
    <ui:define name="title">ChartJS and REST Workflow Case Statistic API Demo</ui:define>
    <ui:define name="content">

      <!-- Loads the ChartJs library needed to render the chart -->
      <h:outputScript library="primefaces" name="chartjs/chartjs.js" />

      <h:form id="form">
        <p:messages />

        <h1>ChartJS and REST Workflow Case Statistic API Demo</h1>
        
        <h2>All cases by state</h2>
        <div>
          <!-- Placeholder to render the Chart chart1 into it -->
          <canvas id="chart1" style="height: 200px;"></canvas>
        </div>

        <h2>All cases by hour and by state</h2>
        <div>
          <!-- Placeholder to render the Chart chart2 into it -->
          <canvas id="chart2" style="height: 200px;"></canvas>
        </div>

		<h2>Only OPEN and DONE cases by hour and by state</h2>
        <div>
          <!-- Placeholder to render the Chart chart2 into it -->
          <canvas id="chart3" style="height: 200px;"></canvas>
        </div>
        
        <script>
  
const chart1 = document.getElementById('chart1');
const userActionChart1 = async () => {
  var basePath = window.location.pathname;
  basePath = basePath.substring(0, basePath.indexOf('/faces/')); 
  
  // Calls the Workflow Case Statistic REST API to aggregate states
  const response = await fetch(basePath+'/api/workflow/cases/stats?agg=businessState');  
  const result = await response.json();  

  new Chart(chart1, {
    type: 'bar',
    data: {
      labels: result.map(bucket => bucket.key),
      datasets: [{
        label: 'Cases by States',
        borderWidth: 1,
        data: result.map(bucket => bucket.count)
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          title: {
            text: 'Tasks',
            display: true
          }
        },
        x: {
          title: {
            text: 'States',
            display: true
          }
        }
      }
    }
  });
}
 
const chart2 = document.getElementById('chart2');
const userActionChart2 = async () => {
  var basePath = window.location.pathname;
  basePath = basePath.substring(0, basePath.indexOf('/faces/')); 
  
  // Calls the Workflow Case Statistic REST API to aggregate startTimeStamps by hour and state 
  const response = await fetch(basePath + '/api/workflow/cases/stats?agg=startTimestamp:bucket:day,businessState');
  const result = await response.json();
  new Chart(chart2, {
    type: 'bar',
    data: {
      labels: result.map(bucket => bucket.key),
      datasets: [{
          label: 'OPEN',
          borderWidth: 1,
          backgroundColor: 'gray',
          data: getStateCount(result, 'OPEN')
        },
        {
          label: 'IN_PROGRESS',
          borderWidth: 1,
          backgroundColor: 'blue',
          data: getStateCount(result,'IN_PROGRESS')
        },
        {
          label: 'DONE',
          borderWidth: 1,
          backgroundColor: 'green',
          data: getStateCount(result,'DONE')
        }
      ]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          title: {
            text: 'Cases',
            display: true
          }
        },
        x: {
          title: {
            text: 'Hour',
            display: true
          }
        }
      }
    }
  });
}

const chart3 = document.getElementById('chart3');
const userActionChart3 = async () => {
  var basePath = window.location.pathname;
  basePath = basePath.substring(0, basePath.indexOf('/faces/')); 
  
  // Calls the Workflow Statistic Case REST API to aggregate startTimeStamps by hour and state 
  const response = await fetch(basePath + '/api/workflow/cases/stats?agg=startTimestamp:bucket:hour,businessState&amp;filter=businessState:OPEN DONE');
  const result = await response.json();
  new Chart(chart3, {
    type: 'bar',
    data: {
      labels: result.map(bucket => bucket.key),
      datasets: [{
          label: 'OPEN',
          borderWidth: 1,
          backgroundColor: 'gray',
          data: getStateCount(result, 'OPEN')
        },
        {
          label: 'DONE',
          borderWidth: 1,
          backgroundColor: 'green',
          data: getStateCount(result,'DONE')
        }
      ]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          title: {
            text: 'Cases',
            display: true
          }
        },
        x: {
          title: {
            text: 'Hour',
            display: true
          }
        }
      }
    }
  });
}

function getStateCount(result, state) {
	let aggs = result.map(bucket => bucket.count > 0 ? bucket.aggs.find(a => a.key === state) : undefined);
	let stateCount = aggs.map(a => a === undefined ? 0 : a.count)
	return stateCount;
}
 
userActionChart1();
userActionChart2();
userActionChart3();
          </script>
        <div class="command-btns">
          <p:commandLink id="cancel"
            actionListener="#{ivyWorkflowView.cancel()}" value="Cancel" />
          <p:commandButton id="proceed" actionListener="#{logic.close}"
            value="Proceed" update="form" icon="pi pi-check" />
        </div>
      </h:form>

    </ui:define>
  </ui:composition>
</h:body>
</html>